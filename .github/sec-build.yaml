- Target: nmaguiar/socksd:build (alpine 3.18.3)
  Class: os-pkgs
  Type: alpine
  Vulnerabilities:
  - VulnerabilityID: CVE-2023-38039
    PkgID: curl@8.2.1-r0
    PkgName: curl
    InstalledVersion: 8.2.1-r0
    FixedVersion: 8.3.0-r0
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-38039
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: out of heap memory issue due to missing limit on header quantity
    Description: |-
      When curl retrieves an HTTP response, it stores the incoming headers so that
      they can be accessed later via the libcurl headers API.

      However, curl did not have a limit in how many or how large headers it would
      accept in a response, allowing a malicious server to stream an endless series
      of headers and eventually cause curl to run out of heap memory.
    Severity: HIGH
    CweIDs:
    - CWE-770
    CVSS:
      nvd:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2023-38039
    - https://curl.se/docs/CVE-2023-38039.html
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-38039
    - https://hackerone.com/reports/2072338
    - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5DCZMYODALBLVOXVJEN2LF2MLANEYL4F/
    - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M6KGKB2JNZVT276JYSKI6FV2VFJUGDOJ/
    - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TEAWTYHC3RT6ZRS5OZRHLAIENVN6CCIS/
    - https://nvd.nist.gov/vuln/detail/CVE-2023-38039
    - https://ubuntu.com/security/notices/USN-6363-1
    - https://www.cve.org/CVERecord?id=CVE-2023-38039
    PublishedDate: '2023-09-15T04:15:00Z'
    LastModifiedDate: '2023-09-27T15:18:00Z'
  - VulnerabilityID: CVE-2023-38039
    PkgID: libcurl@8.2.1-r0
    PkgName: libcurl
    InstalledVersion: 8.2.1-r0
    FixedVersion: 8.3.0-r0
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    SeveritySource: nvd
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-38039
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: out of heap memory issue due to missing limit on header quantity
    Description: |-
      When curl retrieves an HTTP response, it stores the incoming headers so that
      they can be accessed later via the libcurl headers API.

      However, curl did not have a limit in how many or how large headers it would
      accept in a response, allowing a malicious server to stream an endless series
      of headers and eventually cause curl to run out of heap memory.
    Severity: HIGH
    CweIDs:
    - CWE-770
    CVSS:
      nvd:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2023-38039
    - https://curl.se/docs/CVE-2023-38039.html
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-38039
    - https://hackerone.com/reports/2072338
    - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5DCZMYODALBLVOXVJEN2LF2MLANEYL4F/
    - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M6KGKB2JNZVT276JYSKI6FV2VFJUGDOJ/
    - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TEAWTYHC3RT6ZRS5OZRHLAIENVN6CCIS/
    - https://nvd.nist.gov/vuln/detail/CVE-2023-38039
    - https://ubuntu.com/security/notices/USN-6363-1
    - https://www.cve.org/CVERecord?id=CVE-2023-38039
    PublishedDate: '2023-09-15T04:15:00Z'
    LastModifiedDate: '2023-09-27T15:18:00Z'
  - VulnerabilityID: CVE-2023-44487
    PkgID: nghttp2-libs@1.55.1-r0
    PkgName: nghttp2-libs
    InstalledVersion: 1.55.1-r0
    FixedVersion: 1.57.0-r0
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-44487
    DataSource:
      ID: alpine
      Name: Alpine Secdb
      URL: https://secdb.alpinelinux.org/
    Title: Multiple HTTP/2 enabled web servers are vulnerable to a DDoS attack
    Description: No description is available for this CVE.
    Severity: HIGH
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
        V3Score: 5.3
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2023-44487
    - https://aws.amazon.com/security/security-bulletins/AWS-2023-011/
    - https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/
    - https://blog.cloudflare.com/zero-day-rapid-reset-http2-record-breaking-ddos-attack/
    - https://bugzilla.proxmox.com/show_bug.cgi?id=4988
    - https://cgit.freebsd.org/ports/commit/?id=c64c329c2c1752f46b73e3e6ce9f4329be6629f9
    - https://chaos.social/@icing/111210915918780532
    - https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/
    - https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-44487
    - https://devblogs.microsoft.com/dotnet/october-2023-updates/
    - https://edg.io/lp/blog/resets-leaks-ddos-and-the-tale-of-a-hidden-cve
    - https://forums.swift.org/t/swift-nio-http2-security-update-cve-2023-44487-http-2-dos/67764
    - https://gist.github.com/adulau/7c2bfb8e9cdbe4b35a5e131c66a0c088
    - https://github.com/advisories/GHSA-vx74-f528-fxqg
    - https://github.com/advisories/GHSA-xpw8-rcwv-8f8p
    - https://github.com/alibaba/tengine/issues/1872
    - https://github.com/apache/tomcat/tree/main/java/org/apache/coyote/http2
    - https://github.com/apache/trafficserver/pull/10564
    - https://github.com/apple/swift-nio-http2
    - https://github.com/apple/swift-nio-http2/security/advisories/GHSA-qppj-fm5r-hxr3
    - https://github.com/bcdannyboy/CVE-2023-44487
    - https://github.com/caddyserver/caddy/issues/5877
    - https://github.com/dotnet/announcements/issues/277
    - https://github.com/dotnet/core/blob/e4613450ea0da7fd2fc6b61dfb2c1c1dec1ce9ec/release-notes/6.0/6.0.23/6.0.23.md?plain=1#L73
    - https://github.com/eclipse/jetty.project/issues/10679
    - https://github.com/envoyproxy/envoy/pull/30055
    - https://github.com/facebook/proxygen/pull/466
    - https://github.com/golang/go/issues/63417
    - https://github.com/grpc/grpc-go/pull/6703
    - https://github.com/h2o/h2o/pull/3291
    - https://github.com/h2o/h2o/security/advisories/GHSA-2m7v-gc89-fjqf
    - https://github.com/haproxy/haproxy/issues/2312
    - https://github.com/hyperium/hyper/issues/3337
    - https://github.com/icing/mod_h2/blob/0a864782af0a942aa2ad4ed960a6b32cd35bcf0a/mod_http2/README.md?plain=1#L239-L244
    - https://github.com/kubernetes/kubernetes/pull/121120
    - https://github.com/micrictor/http2-rst-stream
    - https://github.com/microsoft/CBL-Mariner/pull/6381
    - https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61
    - https://github.com/nghttp2/nghttp2/pull/1961
    - https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0
    - https://github.com/nodejs/node/pull/50121
    - https://github.com/opensearch-project/data-prepper/issues/3474
    - https://github.com/oqtane/oqtane.framework/discussions/3367
    - https://groups.google.com/g/golang-announce/c/iNNxDTCjZvo
    - https://lists.apache.org/thread/5py8h42mxfsn8l1wy6o41xwhsjlsd87q
    - https://mailman.nginx.org/pipermail/nginx-devel/2023-October/S36Q5HBXR7CAIMPLLPRSSSYR4PCMWILK.html
    - https://msrc.microsoft.com/blog/2023/10/microsoft-response-to-distributed-denial-of-service-ddos-attacks-against-http/2/
    - https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-44487
    - https://my.f5.com/manage/s/article/K000137106
    - https://netty.io/news/2023/10/10/4-1-100-Final.html
    - https://news.ycombinator.com/item?id=37830987
    - https://news.ycombinator.com/item?id=37830998
    - https://news.ycombinator.com/item?id=37831062
    - https://nvd.nist.gov/vuln/detail/CVE-2023-44487
    - https://openssf.org/blog/2023/10/10/http-2-rapid-reset-vulnerability-highlights-need-for-rapid-response/
    - https://seanmonstar.com/post/730794151136935936/hyper-http2-rapid-reset-unaffected
    - https://tomcat.apache.org/security-10.html#Fixed_in_Apache_Tomcat_10.1.14
    - https://ubuntu.com/security/notices/USN-6427-1
    - https://www.bleepingcomputer.com/news/security/new-http-2-rapid-reset-zero-day-attack-breaks-ddos-records/
    - https://www.cve.org/CVERecord?id=CVE-2023-44487
    - https://www.haproxy.com/blog/haproxy-is-not-affected-by-the-http-2-rapid-reset-attack-cve-2023-44487
    - https://www.mail-archive.com/haproxy@formilux.org/msg44134.html
    - https://www.nginx.com/blog/http-2-rapid-reset-attack-impacting-f5-nginx-products/
    - https://www.openwall.com/lists/oss-security/2023/10/10/6
    - https://www.phoronix.com/news/HTTP2-Rapid-Reset-Attack
- Target: Java
  Class: lang-pkgs
  Type: jar
  Vulnerabilities:
  - VulnerabilityID: CVE-2023-42503
    PkgName: org.apache.commons:commons-compress
    PkgPath: openaf/openaf.jar
    InstalledVersion: 1.23.0
    FixedVersion: 1.24.0
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-42503
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: Improper Input Validation, Uncontrolled Resource Consumption vulnerabi ...
    Description: "Improper Input Validation, Uncontrolled Resource Consumption vulnerability in Apache Commons Compress in TAR parsing.This issue affects Apache Commons Compress:\_from 1.22 before 1.24.0.\n\nUsers are recommended to upgrade to version 1.24.0, which fixes the issue.\n\nA third party can create a malformed TAR file by manipulating file modification times headers, which when parsed with Apache Commons Compress, will cause a denial of service issue via CPU consumption.\n\nIn version 1.22 of Apache Commons Compress, support was added for file modification times with higher precision (issue # COMPRESS-612 [1]). The format for the PAX extended headers carrying this data consists of two numbers separated by a period [2], indicating seconds and subsecond precision (for example “1647221103.5998539”). The impacted fields are “atime”, “ctime”, “mtime” and “LIBARCHIVE.creationtime”. No input validation is performed prior to the parsing of header values.\n\nParsing of these numbers uses the BigDecimal [3] class from the JDK which has a publicly known algorithmic complexity issue when doing operations on large numbers, causing denial of service (see issue # JDK-6560193 [4]). A third party can manipulate file time headers in a TAR file by placing a number with a very long fraction (300,000 digits) or a number with exponent notation (such as “9e9999999”) within a file modification time header, and the parsing of files with these headers will take hours instead of seconds, leading to a denial of service via exhaustion of CPU resources. This issue is similar to CVE-2012-2098 [5].\n\n[1]:  https://issues.apache.org/jira/browse/COMPRESS-612 \n[2]:  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_05 \n[3]:  https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html \n[4]:  https://bugs.openjdk.org/browse/JDK-6560193 \n[5]:  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2098 \n\nOnly applications using CompressorStreamFactory class (with auto-detection of file types), TarArchiveInputStream and TarFile classes to parse TAR files are impacted. Since this code was introduced in v1.22, only that version and later versions are impacted.\n\n"
    Severity: MEDIUM
    CweIDs:
    - CWE-20
    - CWE-400
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 5.5
      nvd:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H
        V3Score: 5.5
    References:
    - https://github.com/apache/commons-compress
    - https://github.com/apache/commons-compress/commit/aae38bfb820159ae7a0b792e779571f6a46b3889
    - https://lists.apache.org/thread/5xwcyr600mn074vgxq92tjssrchmc93c
    - https://nvd.nist.gov/vuln/detail/CVE-2023-42503
    PublishedDate: '2023-09-14T08:15:00Z'
    LastModifiedDate: '2023-09-19T13:43:00Z'
  - VulnerabilityID: CVE-2023-36478
    PkgName: org.eclipse.jetty:jetty-http
    PkgPath: openaf/openaf.jar
    InstalledVersion: 9.4.51.v20230217
    FixedVersion: 10.0.16, 11.0.16, 9.4.53
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-36478
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: HTTP/2 HPACK integer overflow and buffer allocation
    Description: |-
      An integer overflow in `MetaDataBuilder.checkSize` allows for HTTP/2 HPACK header values to
      exceed their size limit. 

      In `MetaDataBuilder.java`, the following code determines if a header name or value
      exceeds the size limit, and throws an exception if the limit is exceeded:

      ```java
      291 public void checkSize(int length, boolean huffman) throws SessionException
      292 {
      293 // Apply a huffman fudge factor
      294 if (huffman)
      295 length = (length * 4) / 3;
      296 if ((_size + length) > _maxSize)
      297 throw new HpackException.SessionException("Header too large %d > %d",
      _size + length, _maxSize);
      298 }
      ```

      However, when length is very large and huffman is true, the multiplication by 4 in line 295
      will overflow, and length will become negative. (_size+length) will now be negative, and
      the check on line 296 will not be triggered.

      Furthermore, `MetaDataBuilder.checkSize` allows for user-entered HPACK header value sizes to be
      negative, potentially leading to a very large buffer allocation later on when the
      user-entered size is multiplied by 2.

      In `MetaDataBuilder.java`, the following code determines if a header name or value
      exceeds the size limit, and throws an exception if the limit is exceeded:

      ```java
      public void checkSize(int length, boolean huffman) throws SessionException
      {
      // Apply a huffman fudge factor
      if (huffman)
      length = (length * 4) / 3;
      if ((_size + length) > _maxSize)
      throw new HpackException.SessionException("Header too large %d > %d", _size
      + length, _maxSize);
      }
      ```

      However, no exception is thrown in the case of a negative size.
      Later, in `Huffman.decode`, the user-entered length is multiplied by 2 before allocating a buffer:

      ```java
      public static String decode(ByteBuffer buffer, int length) throws
      HpackException.CompressionException
      {
      Utf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);
      // ...
      ```

      This means that if a user provides a negative length value (or, more precisely, a length
      value which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a
      very large positive number when multiplied by 2, then the user can cause a very large
      buffer to be allocated on the server.


      ### Exploit Scenario 1
      An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.
      Each time this header is decoded:
      + `HpackDecode.decode` will determine that a Huffman-coded value of length
      805306494 needs to be decoded.
      + `MetaDataBuilder.checkSize` will approve this length.
      + Huffman.decode will allocate a 1.6 GB string array.
      + Huffman.decode will have a buffer overflow error, and the array will be deallocated
      the next time garbage collection happens. (Note: this can be delayed by appending
      valid huffman-coded characters to the end of the header.)

      Depending on the timing of garbage collection, the number of threads, and the amount of
      memory available on the server, this may cause the server to run out of memory.


      ### Exploit Scenario 2
      An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each
      time this header is decoded:
       + HpackDecode.decode will determine that a Huffman-coded value of length
      -1073758081 needs to be decoded
       +  MetaDataBuilder.checkSize will approve this length
       + The number will be multiplied by 2 to get 2147451134, and Huffman.decode will
      allocate a 2.1 GB string array
       + Huffman.decode will have a buffer overflow error, and the array will be deallocated
      the next time garbage collection happens (Note that this deallocation can be
      delayed by adding valid Huffman-coded characters to the end of the header)

      Depending on the timing of garbage collection, the number of threads, and the amount of
      memory available on the server, this may cause the server to run out of memory.

      ### Impact
      Users of HTTP/2 can be impacted by a remote denial of service attack.

      ### Patches
      Fixed in Jetty 10.0.16 and Jetty 11.0.16
      Fixed in Jetty 9.4.53
      Jetty 12.x is unaffected.

      ### Workarounds
      No workarounds possible, only patched versions of Jetty.

      ### References
      * https://github.com/eclipse/jetty.project/pull/9634
    Severity: HIGH
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://github.com/eclipse/jetty.project
    - https://github.com/eclipse/jetty.project/pull/9634
    - https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16
    - https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16
    - https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009
    - https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r
    - https://nvd.nist.gov/vuln/detail/CVE-2023-36478
  - VulnerabilityID: CVE-2023-40167
    PkgName: org.eclipse.jetty:jetty-http
    PkgPath: openaf/openaf.jar
    InstalledVersion: 9.4.51.v20230217
    FixedVersion: 9.4.52, 10.0.16, 11.0.16, 12.0.1
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-40167
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: Improper validation of HTTP/1 content-length
    Description: Jetty is a Java based web server and servlet engine. Prior to versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1, Jetty accepts the `+` character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. Versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1 contain a patch for this issue. There is no workaround as there is no known exploit scenario.
    Severity: MEDIUM
    CweIDs:
    - CWE-130
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N
        V3Score: 5.3
      nvd:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N
        V3Score: 5.3
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N
        V3Score: 5.3
    References:
    - https://access.redhat.com/security/cve/CVE-2023-40167
    - https://github.com/eclipse/jetty.project
    - https://github.com/eclipse/jetty.project/security/advisories/GHSA-hmr7-m48g-48f6
    - https://lists.debian.org/debian-lts-announce/2023/09/msg00039.html
    - https://nvd.nist.gov/vuln/detail/CVE-2023-40167
    - https://www.cve.org/CVERecord?id=CVE-2023-40167
    - https://www.debian.org/security/2023/dsa-5507
    - https://www.rfc-editor.org/rfc/rfc9110#section-8.6
    PublishedDate: '2023-09-15T20:15:00Z'
    LastModifiedDate: '2023-09-30T15:15:00Z'
  - VulnerabilityID: CVE-2023-4759
    PkgName: org.eclipse.jgit:org.eclipse.jgit
    PkgPath: openaf/openaf.jar
    InstalledVersion: 5.8.1.202007141445-r
    FixedVersion: 6.6.1.202309021850-r
    Status: fixed
    Layer:
      Digest: sha256:cdaeed09ee2f93873b6258e74683cf60a24765d203504eba3a89609c4393d8d9
      DiffID: sha256:05ff5c9ea69979c51aa61aed9120b8547639d1d75c3a9cfb2ccaf62f6226a2b4
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-4759
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: arbitrary file overwrite
    Description: "Arbitrary File Overwrite in Eclipse JGit <= 6.6.0\n\nIn Eclipse JGit, all versions <= 6.6.0.202305301015-r, a symbolic link present in a specially crafted git repository can be used to write a file to locations outside the working tree when this repository is cloned with JGit to a case-insensitive filesystem, or when a checkout from a clone of such a repository is performed on a case-insensitive filesystem.\n\nThis can happen on checkout (DirCacheCheckout), merge (ResolveMerger\_via its WorkingTreeUpdater), pull (PullCommand\_using merge), and when applying a patch (PatchApplier). This can be exploited for remote code execution (RCE), for instance if the file written outside the working tree is a git filter that gets executed on a subsequent git command.\n\nThe issue occurs only on case-insensitive filesystems, like the default filesystems on Windows and macOS. The user performing the clone or checkout must have the rights to create symbolic links for the problem to occur, and symbolic links must be enabled in the git configuration.\n\nSetting git configuration option core.symlinks = false\_before checking out avoids the problem.\n\nThe issue was fixed in Eclipse JGit version 6.6.1.202309021850-r and 6.7.0.202309050840-r, available via  Maven Central https://repo1.maven.org/maven2/org/eclipse/jgit/ \_and  repo.eclipse.org https://repo.eclipse.org/content/repositories/jgit-releases/ .\n\n\nThe JGit maintainers would like to thank RyotaK for finding and reporting this issue.\n\n\n\n"
    Severity: HIGH
    CweIDs:
    - CWE-59
    - CWE-178
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 8.8
      nvd:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
        V3Score: 8.8
    References:
    - https://access.redhat.com/security/cve/CVE-2023-4759
    - https://git.eclipse.org/c/jgit/jgit.git
    - https://git.eclipse.org/c/jgit/jgit.git/commit/?id=9072103f3b3cf64dd12ad2949836ab98f62dabf1
    - https://gitlab.eclipse.org/security/vulnerability-reports/-/issues/11
    - https://nvd.nist.gov/vuln/detail/CVE-2023-4759
    - https://projects.eclipse.org/projects/technology.jgit/releases/6.6.1
    - https://www.cve.org/CVERecord?id=CVE-2023-4759
    PublishedDate: '2023-09-12T10:15:00Z'
    LastModifiedDate: '2023-09-18T13:54:00Z'

- Target: nmaguiar/socksd:latest (alpine 3.18.3)
  Class: os-pkgs
  Type: alpine
- Target: Java
  Class: lang-pkgs
  Type: jar
  Vulnerabilities:
  - VulnerabilityID: CVE-2023-42503
    PkgName: org.apache.commons:commons-compress
    PkgPath: openaf/openaf.jar
    InstalledVersion: 1.23.0
    FixedVersion: 1.24.0
    Status: fixed
    Layer:
      Digest: sha256:7e710951cd25a637bc4c0d6ec88d11bcd939c10309302125f0ab83cd580714dd
      DiffID: sha256:38d3f9cdaaca13e171c0f8a1e47ca23d27e6fbd1fa70dd41d64a7be08c26ce0c
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-42503
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: Improper Input Validation, Uncontrolled Resource Consumption vulnerabi ...
    Description: "Improper Input Validation, Uncontrolled Resource Consumption vulnerability in Apache Commons Compress in TAR parsing.This issue affects Apache Commons Compress:\_from 1.22 before 1.24.0.\n\nUsers are recommended to upgrade to version 1.24.0, which fixes the issue.\n\nA third party can create a malformed TAR file by manipulating file modification times headers, which when parsed with Apache Commons Compress, will cause a denial of service issue via CPU consumption.\n\nIn version 1.22 of Apache Commons Compress, support was added for file modification times with higher precision (issue # COMPRESS-612 [1]). The format for the PAX extended headers carrying this data consists of two numbers separated by a period [2], indicating seconds and subsecond precision (for example “1647221103.5998539”). The impacted fields are “atime”, “ctime”, “mtime” and “LIBARCHIVE.creationtime”. No input validation is performed prior to the parsing of header values.\n\nParsing of these numbers uses the BigDecimal [3] class from the JDK which has a publicly known algorithmic complexity issue when doing operations on large numbers, causing denial of service (see issue # JDK-6560193 [4]). A third party can manipulate file time headers in a TAR file by placing a number with a very long fraction (300,000 digits) or a number with exponent notation (such as “9e9999999”) within a file modification time header, and the parsing of files with these headers will take hours instead of seconds, leading to a denial of service via exhaustion of CPU resources. This issue is similar to CVE-2012-2098 [5].\n\n[1]:  https://issues.apache.org/jira/browse/COMPRESS-612 \n[2]:  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_05 \n[3]:  https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html \n[4]:  https://bugs.openjdk.org/browse/JDK-6560193 \n[5]:  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2098 \n\nOnly applications using CompressorStreamFactory class (with auto-detection of file types), TarArchiveInputStream and TarFile classes to parse TAR files are impacted. Since this code was introduced in v1.22, only that version and later versions are impacted.\n\n"
    Severity: MEDIUM
    CweIDs:
    - CWE-20
    - CWE-400
    References:
    - https://github.com/apache/commons-compress
    - https://github.com/apache/commons-compress/commit/aae38bfb820159ae7a0b792e779571f6a46b3889
    - https://lists.apache.org/thread/5xwcyr600mn074vgxq92tjssrchmc93c
    - https://nvd.nist.gov/vuln/detail/CVE-2023-42503
    PublishedDate: '2023-09-14T08:15:00Z'
    LastModifiedDate: '2023-09-14T13:01:00Z'
  - VulnerabilityID: CVE-2023-40167
    PkgName: org.eclipse.jetty:jetty-http
    PkgPath: openaf/openaf.jar
    InstalledVersion: 9.4.51.v20230217
    FixedVersion: 9.4.52, 10.0.16, 11.0.16, 12.0.1
    Status: fixed
    Layer:
      Digest: sha256:7e710951cd25a637bc4c0d6ec88d11bcd939c10309302125f0ab83cd580714dd
      DiffID: sha256:38d3f9cdaaca13e171c0f8a1e47ca23d27e6fbd1fa70dd41d64a7be08c26ce0c
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-40167
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Maven
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven
    Title: Jetty is a Java based web server and servlet engine. Prior to versions ...
    Description: |-
      ### Impact

      Jetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response.

      ### Workarounds

      There is no workaround as there is no known exploit scenario.   

      ### Original Report 

      [RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts "+" prefixed Content-Length, which could lead to potential HTTP request smuggling.

      Payload:

      ```
       POST / HTTP/1.1
       Host: a.com
       Content-Length: +16
       Connection: close
       ​
       0123456789abcdef
      ```

      When sending this payload to Jetty, it can successfully parse and identify the length.

      When sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request.

      This behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.
    Severity: MEDIUM
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N
        V3Score: 5.3
    References:
    - https://github.com/eclipse/jetty.project
    - https://github.com/eclipse/jetty.project/security/advisories/GHSA-hmr7-m48g-48f6
    - https://www.rfc-editor.org/rfc/rfc9110#section-8.6
